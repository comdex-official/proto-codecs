import Long from "long";
import * as _m0 from "protobufjs/minimal";
import { WhitelistedAppIds, LockedVault, LockedVaultToAppMapping } from "../../../comdex/liquidation/v1beta1/locked_vault";
import { Params } from "../../../comdex/liquidation/v1beta1/params";
export declare const protobufPackage = "comdex.liquidation.v1beta1";
export interface GenesisState {
    lockedVault: LockedVault[];
    lockedVaultToAppMapping: LockedVaultToAppMapping[];
    whitelistedAppIds?: WhitelistedAppIds;
    params?: Params;
}
export declare const GenesisState: {
    encode(message: GenesisState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GenesisState;
    fromJSON(object: any): GenesisState;
    toJSON(message: GenesisState): unknown;
    fromPartial<I extends {
        lockedVault?: {
            id?: string | number | Long.Long | undefined;
            appId?: string | number | Long.Long | undefined;
            appVaultTypeId?: string | undefined;
            originalVaultId?: string | number | Long.Long | undefined;
            extendedPairVaultId?: string | number | Long.Long | undefined;
            owner?: string | undefined;
            amountIn?: string | undefined;
            amountOut?: string | undefined;
            updatedAmountOut?: string | undefined;
            initiator?: string | undefined;
            isAuctionComplete?: boolean | undefined;
            isAuctionInProgress?: boolean | undefined;
            crAtLiquidation?: string | undefined;
            currentCollateralisationRatio?: string | undefined;
            collateralToBeAuctioned?: string | undefined;
            liquidationTimestamp?: Date | undefined;
            selloffHistory?: string[] | undefined;
            interestAccumulated?: string | undefined;
            borrowMetaData?: {
                lendingId?: string | number | Long.Long | undefined;
                isStableBorrow?: boolean | undefined;
                stableBorrowRate?: string | undefined;
                bridgedAssetAmount?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
            } | undefined;
        }[] | undefined;
        lockedVaultToAppMapping?: {
            appId?: string | number | Long.Long | undefined;
            lockedVault?: {
                id?: string | number | Long.Long | undefined;
                appId?: string | number | Long.Long | undefined;
                appVaultTypeId?: string | undefined;
                originalVaultId?: string | number | Long.Long | undefined;
                extendedPairVaultId?: string | number | Long.Long | undefined;
                owner?: string | undefined;
                amountIn?: string | undefined;
                amountOut?: string | undefined;
                updatedAmountOut?: string | undefined;
                initiator?: string | undefined;
                isAuctionComplete?: boolean | undefined;
                isAuctionInProgress?: boolean | undefined;
                crAtLiquidation?: string | undefined;
                currentCollateralisationRatio?: string | undefined;
                collateralToBeAuctioned?: string | undefined;
                liquidationTimestamp?: Date | undefined;
                selloffHistory?: string[] | undefined;
                interestAccumulated?: string | undefined;
                borrowMetaData?: {
                    lendingId?: string | number | Long.Long | undefined;
                    isStableBorrow?: boolean | undefined;
                    stableBorrowRate?: string | undefined;
                    bridgedAssetAmount?: {
                        denom?: string | undefined;
                        amount?: string | undefined;
                    } | undefined;
                } | undefined;
            }[] | undefined;
        }[] | undefined;
        whitelistedAppIds?: {
            whitelistedAppIds?: (string | number | Long.Long)[] | undefined;
        } | undefined;
        params?: {} | undefined;
    } & {
        lockedVault?: ({
            id?: string | number | Long.Long | undefined;
            appId?: string | number | Long.Long | undefined;
            appVaultTypeId?: string | undefined;
            originalVaultId?: string | number | Long.Long | undefined;
            extendedPairVaultId?: string | number | Long.Long | undefined;
            owner?: string | undefined;
            amountIn?: string | undefined;
            amountOut?: string | undefined;
            updatedAmountOut?: string | undefined;
            initiator?: string | undefined;
            isAuctionComplete?: boolean | undefined;
            isAuctionInProgress?: boolean | undefined;
            crAtLiquidation?: string | undefined;
            currentCollateralisationRatio?: string | undefined;
            collateralToBeAuctioned?: string | undefined;
            liquidationTimestamp?: Date | undefined;
            selloffHistory?: string[] | undefined;
            interestAccumulated?: string | undefined;
            borrowMetaData?: {
                lendingId?: string | number | Long.Long | undefined;
                isStableBorrow?: boolean | undefined;
                stableBorrowRate?: string | undefined;
                bridgedAssetAmount?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
            } | undefined;
        }[] & ({
            id?: string | number | Long.Long | undefined;
            appId?: string | number | Long.Long | undefined;
            appVaultTypeId?: string | undefined;
            originalVaultId?: string | number | Long.Long | undefined;
            extendedPairVaultId?: string | number | Long.Long | undefined;
            owner?: string | undefined;
            amountIn?: string | undefined;
            amountOut?: string | undefined;
            updatedAmountOut?: string | undefined;
            initiator?: string | undefined;
            isAuctionComplete?: boolean | undefined;
            isAuctionInProgress?: boolean | undefined;
            crAtLiquidation?: string | undefined;
            currentCollateralisationRatio?: string | undefined;
            collateralToBeAuctioned?: string | undefined;
            liquidationTimestamp?: Date | undefined;
            selloffHistory?: string[] | undefined;
            interestAccumulated?: string | undefined;
            borrowMetaData?: {
                lendingId?: string | number | Long.Long | undefined;
                isStableBorrow?: boolean | undefined;
                stableBorrowRate?: string | undefined;
                bridgedAssetAmount?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
            } | undefined;
        } & {
            id?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["lockedVault"][number]["id"], keyof Long.Long>, never>) | undefined;
            appId?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["lockedVault"][number]["appId"], keyof Long.Long>, never>) | undefined;
            appVaultTypeId?: string | undefined;
            originalVaultId?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["lockedVault"][number]["originalVaultId"], keyof Long.Long>, never>) | undefined;
            extendedPairVaultId?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["lockedVault"][number]["extendedPairVaultId"], keyof Long.Long>, never>) | undefined;
            owner?: string | undefined;
            amountIn?: string | undefined;
            amountOut?: string | undefined;
            updatedAmountOut?: string | undefined;
            initiator?: string | undefined;
            isAuctionComplete?: boolean | undefined;
            isAuctionInProgress?: boolean | undefined;
            crAtLiquidation?: string | undefined;
            currentCollateralisationRatio?: string | undefined;
            collateralToBeAuctioned?: string | undefined;
            liquidationTimestamp?: Date | undefined;
            selloffHistory?: (string[] & string[] & Record<Exclude<keyof I["lockedVault"][number]["selloffHistory"], keyof string[]>, never>) | undefined;
            interestAccumulated?: string | undefined;
            borrowMetaData?: ({
                lendingId?: string | number | Long.Long | undefined;
                isStableBorrow?: boolean | undefined;
                stableBorrowRate?: string | undefined;
                bridgedAssetAmount?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
            } & {
                lendingId?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["lockedVault"][number]["borrowMetaData"]["lendingId"], keyof Long.Long>, never>) | undefined;
                isStableBorrow?: boolean | undefined;
                stableBorrowRate?: string | undefined;
                bridgedAssetAmount?: ({
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & Record<Exclude<keyof I["lockedVault"][number]["borrowMetaData"]["bridgedAssetAmount"], keyof import("../../../cosmos/base/v1beta1/coin").Coin>, never>) | undefined;
            } & Record<Exclude<keyof I["lockedVault"][number]["borrowMetaData"], keyof import("../../../comdex/liquidation/v1beta1/locked_vault").BorrowMetaData>, never>) | undefined;
        } & Record<Exclude<keyof I["lockedVault"][number], keyof LockedVault>, never>)[] & Record<Exclude<keyof I["lockedVault"], keyof {
            id?: string | number | Long.Long | undefined;
            appId?: string | number | Long.Long | undefined;
            appVaultTypeId?: string | undefined;
            originalVaultId?: string | number | Long.Long | undefined;
            extendedPairVaultId?: string | number | Long.Long | undefined;
            owner?: string | undefined;
            amountIn?: string | undefined;
            amountOut?: string | undefined;
            updatedAmountOut?: string | undefined;
            initiator?: string | undefined;
            isAuctionComplete?: boolean | undefined;
            isAuctionInProgress?: boolean | undefined;
            crAtLiquidation?: string | undefined;
            currentCollateralisationRatio?: string | undefined;
            collateralToBeAuctioned?: string | undefined;
            liquidationTimestamp?: Date | undefined;
            selloffHistory?: string[] | undefined;
            interestAccumulated?: string | undefined;
            borrowMetaData?: {
                lendingId?: string | number | Long.Long | undefined;
                isStableBorrow?: boolean | undefined;
                stableBorrowRate?: string | undefined;
                bridgedAssetAmount?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
            } | undefined;
        }[]>, never>) | undefined;
        lockedVaultToAppMapping?: ({
            appId?: string | number | Long.Long | undefined;
            lockedVault?: {
                id?: string | number | Long.Long | undefined;
                appId?: string | number | Long.Long | undefined;
                appVaultTypeId?: string | undefined;
                originalVaultId?: string | number | Long.Long | undefined;
                extendedPairVaultId?: string | number | Long.Long | undefined;
                owner?: string | undefined;
                amountIn?: string | undefined;
                amountOut?: string | undefined;
                updatedAmountOut?: string | undefined;
                initiator?: string | undefined;
                isAuctionComplete?: boolean | undefined;
                isAuctionInProgress?: boolean | undefined;
                crAtLiquidation?: string | undefined;
                currentCollateralisationRatio?: string | undefined;
                collateralToBeAuctioned?: string | undefined;
                liquidationTimestamp?: Date | undefined;
                selloffHistory?: string[] | undefined;
                interestAccumulated?: string | undefined;
                borrowMetaData?: {
                    lendingId?: string | number | Long.Long | undefined;
                    isStableBorrow?: boolean | undefined;
                    stableBorrowRate?: string | undefined;
                    bridgedAssetAmount?: {
                        denom?: string | undefined;
                        amount?: string | undefined;
                    } | undefined;
                } | undefined;
            }[] | undefined;
        }[] & ({
            appId?: string | number | Long.Long | undefined;
            lockedVault?: {
                id?: string | number | Long.Long | undefined;
                appId?: string | number | Long.Long | undefined;
                appVaultTypeId?: string | undefined;
                originalVaultId?: string | number | Long.Long | undefined;
                extendedPairVaultId?: string | number | Long.Long | undefined;
                owner?: string | undefined;
                amountIn?: string | undefined;
                amountOut?: string | undefined;
                updatedAmountOut?: string | undefined;
                initiator?: string | undefined;
                isAuctionComplete?: boolean | undefined;
                isAuctionInProgress?: boolean | undefined;
                crAtLiquidation?: string | undefined;
                currentCollateralisationRatio?: string | undefined;
                collateralToBeAuctioned?: string | undefined;
                liquidationTimestamp?: Date | undefined;
                selloffHistory?: string[] | undefined;
                interestAccumulated?: string | undefined;
                borrowMetaData?: {
                    lendingId?: string | number | Long.Long | undefined;
                    isStableBorrow?: boolean | undefined;
                    stableBorrowRate?: string | undefined;
                    bridgedAssetAmount?: {
                        denom?: string | undefined;
                        amount?: string | undefined;
                    } | undefined;
                } | undefined;
            }[] | undefined;
        } & {
            appId?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["lockedVaultToAppMapping"][number]["appId"], keyof Long.Long>, never>) | undefined;
            lockedVault?: ({
                id?: string | number | Long.Long | undefined;
                appId?: string | number | Long.Long | undefined;
                appVaultTypeId?: string | undefined;
                originalVaultId?: string | number | Long.Long | undefined;
                extendedPairVaultId?: string | number | Long.Long | undefined;
                owner?: string | undefined;
                amountIn?: string | undefined;
                amountOut?: string | undefined;
                updatedAmountOut?: string | undefined;
                initiator?: string | undefined;
                isAuctionComplete?: boolean | undefined;
                isAuctionInProgress?: boolean | undefined;
                crAtLiquidation?: string | undefined;
                currentCollateralisationRatio?: string | undefined;
                collateralToBeAuctioned?: string | undefined;
                liquidationTimestamp?: Date | undefined;
                selloffHistory?: string[] | undefined;
                interestAccumulated?: string | undefined;
                borrowMetaData?: {
                    lendingId?: string | number | Long.Long | undefined;
                    isStableBorrow?: boolean | undefined;
                    stableBorrowRate?: string | undefined;
                    bridgedAssetAmount?: {
                        denom?: string | undefined;
                        amount?: string | undefined;
                    } | undefined;
                } | undefined;
            }[] & ({
                id?: string | number | Long.Long | undefined;
                appId?: string | number | Long.Long | undefined;
                appVaultTypeId?: string | undefined;
                originalVaultId?: string | number | Long.Long | undefined;
                extendedPairVaultId?: string | number | Long.Long | undefined;
                owner?: string | undefined;
                amountIn?: string | undefined;
                amountOut?: string | undefined;
                updatedAmountOut?: string | undefined;
                initiator?: string | undefined;
                isAuctionComplete?: boolean | undefined;
                isAuctionInProgress?: boolean | undefined;
                crAtLiquidation?: string | undefined;
                currentCollateralisationRatio?: string | undefined;
                collateralToBeAuctioned?: string | undefined;
                liquidationTimestamp?: Date | undefined;
                selloffHistory?: string[] | undefined;
                interestAccumulated?: string | undefined;
                borrowMetaData?: {
                    lendingId?: string | number | Long.Long | undefined;
                    isStableBorrow?: boolean | undefined;
                    stableBorrowRate?: string | undefined;
                    bridgedAssetAmount?: {
                        denom?: string | undefined;
                        amount?: string | undefined;
                    } | undefined;
                } | undefined;
            } & {
                id?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["lockedVaultToAppMapping"][number]["lockedVault"][number]["id"], keyof Long.Long>, never>) | undefined;
                appId?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["lockedVaultToAppMapping"][number]["lockedVault"][number]["appId"], keyof Long.Long>, never>) | undefined;
                appVaultTypeId?: string | undefined;
                originalVaultId?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["lockedVaultToAppMapping"][number]["lockedVault"][number]["originalVaultId"], keyof Long.Long>, never>) | undefined;
                extendedPairVaultId?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["lockedVaultToAppMapping"][number]["lockedVault"][number]["extendedPairVaultId"], keyof Long.Long>, never>) | undefined;
                owner?: string | undefined;
                amountIn?: string | undefined;
                amountOut?: string | undefined;
                updatedAmountOut?: string | undefined;
                initiator?: string | undefined;
                isAuctionComplete?: boolean | undefined;
                isAuctionInProgress?: boolean | undefined;
                crAtLiquidation?: string | undefined;
                currentCollateralisationRatio?: string | undefined;
                collateralToBeAuctioned?: string | undefined;
                liquidationTimestamp?: Date | undefined;
                selloffHistory?: (string[] & string[] & Record<Exclude<keyof I["lockedVaultToAppMapping"][number]["lockedVault"][number]["selloffHistory"], keyof string[]>, never>) | undefined;
                interestAccumulated?: string | undefined;
                borrowMetaData?: ({
                    lendingId?: string | number | Long.Long | undefined;
                    isStableBorrow?: boolean | undefined;
                    stableBorrowRate?: string | undefined;
                    bridgedAssetAmount?: {
                        denom?: string | undefined;
                        amount?: string | undefined;
                    } | undefined;
                } & {
                    lendingId?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["lockedVaultToAppMapping"][number]["lockedVault"][number]["borrowMetaData"]["lendingId"], keyof Long.Long>, never>) | undefined;
                    isStableBorrow?: boolean | undefined;
                    stableBorrowRate?: string | undefined;
                    bridgedAssetAmount?: ({
                        denom?: string | undefined;
                        amount?: string | undefined;
                    } & {
                        denom?: string | undefined;
                        amount?: string | undefined;
                    } & Record<Exclude<keyof I["lockedVaultToAppMapping"][number]["lockedVault"][number]["borrowMetaData"]["bridgedAssetAmount"], keyof import("../../../cosmos/base/v1beta1/coin").Coin>, never>) | undefined;
                } & Record<Exclude<keyof I["lockedVaultToAppMapping"][number]["lockedVault"][number]["borrowMetaData"], keyof import("../../../comdex/liquidation/v1beta1/locked_vault").BorrowMetaData>, never>) | undefined;
            } & Record<Exclude<keyof I["lockedVaultToAppMapping"][number]["lockedVault"][number], keyof LockedVault>, never>)[] & Record<Exclude<keyof I["lockedVaultToAppMapping"][number]["lockedVault"], keyof {
                id?: string | number | Long.Long | undefined;
                appId?: string | number | Long.Long | undefined;
                appVaultTypeId?: string | undefined;
                originalVaultId?: string | number | Long.Long | undefined;
                extendedPairVaultId?: string | number | Long.Long | undefined;
                owner?: string | undefined;
                amountIn?: string | undefined;
                amountOut?: string | undefined;
                updatedAmountOut?: string | undefined;
                initiator?: string | undefined;
                isAuctionComplete?: boolean | undefined;
                isAuctionInProgress?: boolean | undefined;
                crAtLiquidation?: string | undefined;
                currentCollateralisationRatio?: string | undefined;
                collateralToBeAuctioned?: string | undefined;
                liquidationTimestamp?: Date | undefined;
                selloffHistory?: string[] | undefined;
                interestAccumulated?: string | undefined;
                borrowMetaData?: {
                    lendingId?: string | number | Long.Long | undefined;
                    isStableBorrow?: boolean | undefined;
                    stableBorrowRate?: string | undefined;
                    bridgedAssetAmount?: {
                        denom?: string | undefined;
                        amount?: string | undefined;
                    } | undefined;
                } | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["lockedVaultToAppMapping"][number], keyof LockedVaultToAppMapping>, never>)[] & Record<Exclude<keyof I["lockedVaultToAppMapping"], keyof {
            appId?: string | number | Long.Long | undefined;
            lockedVault?: {
                id?: string | number | Long.Long | undefined;
                appId?: string | number | Long.Long | undefined;
                appVaultTypeId?: string | undefined;
                originalVaultId?: string | number | Long.Long | undefined;
                extendedPairVaultId?: string | number | Long.Long | undefined;
                owner?: string | undefined;
                amountIn?: string | undefined;
                amountOut?: string | undefined;
                updatedAmountOut?: string | undefined;
                initiator?: string | undefined;
                isAuctionComplete?: boolean | undefined;
                isAuctionInProgress?: boolean | undefined;
                crAtLiquidation?: string | undefined;
                currentCollateralisationRatio?: string | undefined;
                collateralToBeAuctioned?: string | undefined;
                liquidationTimestamp?: Date | undefined;
                selloffHistory?: string[] | undefined;
                interestAccumulated?: string | undefined;
                borrowMetaData?: {
                    lendingId?: string | number | Long.Long | undefined;
                    isStableBorrow?: boolean | undefined;
                    stableBorrowRate?: string | undefined;
                    bridgedAssetAmount?: {
                        denom?: string | undefined;
                        amount?: string | undefined;
                    } | undefined;
                } | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
        whitelistedAppIds?: ({
            whitelistedAppIds?: (string | number | Long.Long)[] | undefined;
        } & {
            whitelistedAppIds?: ((string | number | Long.Long)[] & (string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["whitelistedAppIds"]["whitelistedAppIds"][number], keyof Long.Long>, never>))[] & Record<Exclude<keyof I["whitelistedAppIds"]["whitelistedAppIds"], keyof (string | number | Long.Long)[]>, never>) | undefined;
        } & Record<Exclude<keyof I["whitelistedAppIds"], "whitelistedAppIds">, never>) | undefined;
        params?: ({} & {} & Record<Exclude<keyof I["params"], never>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof GenesisState>, never>>(object: I): GenesisState;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
